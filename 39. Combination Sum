https://leetcode.com/problems/combination-sum/


import java.util.*;
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        findCombination(0,candidates,target,ans,new ArrayList<>());
        return ans;
    }
    void findCombination( int ind , int arr[] , int target , List<List<Integer>> ans,List<Integer> ds )
    {
        //base case
        if (ind == arr.length)
        {
            if (target == 0)
            {
                ans.add(new ArrayList<>(ds));
            }
            return;
        }

        //pick the element
        if(arr[ind] <= target)
        {
            // first , add element in ds
            ds.add(arr[ind]);

            // call target substract from that arr[ind] element
            findCombination(ind,arr,target - arr[ind], ans,ds);

            // during backtarcking remove the arr[ind] element which is the insert element
             ds.remove(ds.size() - 1);
        }

        // not pick elemennt ,only ind increase rest will same at it is
        findCombination(ind + 1 , arr,target,ans,ds);
    }
}
