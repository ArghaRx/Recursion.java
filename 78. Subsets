import java.util.*;
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<Integer> subset= new ArrayList<>();
        List<List<Integer>> set= new ArrayList<>();
         sub(0,nums,set,subset);
         return set;

    }
    public void sub(int i , int[] num , List<List<Integer>> set,List<Integer> subset)
    {
        if(i == num.length) 
        {
            set.add( new ArrayList<>(subset));
            return;
        }
       // Include the current element
        subset.add(num[i]);
        sub(i + 1, num, set, subset);

        // Exclude the current element
        subset.remove(subset.size() - 1);
        sub(i + 1, num, set, subset);
    }
}

Time Complexity: O(2^n)

Space Complexity: O(n), recursion stack.
