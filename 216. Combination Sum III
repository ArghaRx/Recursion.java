https://leetcode.com/problems/combination-sum-iii/description/?source=submission-ac


import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new ArrayList<>();
      
       // call it by k , ans list(where store the output list-list) , normal list and start point 1
        combination(k, n, ans, new ArrayList<>(), 1);
        return ans;
    }

    public void combination(int k, int n, List<List<Integer>> ans, List<Integer> sublist, int start) {
      
       // Base condition
        if (k == 0 && n == 0) {
            ans.add(new ArrayList<>(sublist));
            return;
        }
      
        for (int i = start; i <= 9; i++) {                 // loop
            sublist.add(i);                                 // add to list
            combination(k - 1, n - i, ans, sublist, i + 1);  // for next iteration k and n both decrease ans start pointer mean i (here) increase
            sublist.remove(sublist.size() - 1);              // during backtracking remove the last insert element
        }
    }
}
