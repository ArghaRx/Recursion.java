/// https://leetcode.com/problems/n-queens/description/

____BRUTE_____

class Solution {
    public List<List<String>> solveNQueens(int n) {
        char board[][] = new char[n][n];
        List < List < String >> res = new ArrayList < List < String >> ();
        for(int i = 0 ; i < n ; i ++)
        {
            for(int j = 0 ; j < n ; j++)
            {
                board[i][j] = '.';
            }
        }

        dfs( 0 , board , res); // main function for giving ans
        return res;
    }
    public void dfs(int col, char[][] board, List < List < String >> ans)
    { 
        //Base condition
        if(col == board.length)
        {
            ans.add(construct(board));
            return;
        }

        for(int row = 0 ; row < board.length; row ++)
        {
            if(validate(board , row , col)) // If board is valid for this row col
            {
                board[row][col] = 'Q';     // place a Queen
                dfs(col + 1, board , ans); // call func for next col
                board[row][col] = '.';  // During backtracking remove the newly insert Q
            }
        }
    }

    // This func for check where the next Queen place cheching all attacking condition
    public boolean validate(char[][] board , int row , int col)
    {
         int duprow = row;
         int dupcol = col;

         // middle to north-west angle
        while (row >= 0 && col >= 0)
        {
            if(board[row][col] == 'Q') return false;
            row --;
            col--;
        }
        row = duprow;
        col = dupcol;

        // middle to west angle only col decrease
        while(col >= 0)
        {
             if(board[row][col] == 'Q') return false;
             col --;
        }
        row = duprow;
        col = dupcol;

        // // for middle to west-south angle
        while (row < board.length && col >= 0 )
        {
             if(board[row][col] == 'Q') return false;
             row ++;
             col --;
        }
        return true;
    }

    // for contract after a new Queen insert
   static List < String > construct(char[][] board) {
       List < String > res = new LinkedList<>();
       for(int i = 0 ; i < board.length ; i++)
       {
            String s = new String(board[i]);
           res.add(s);
       }
       return res;
   }
}
